

1.Creating the blog database.

Execute the following SQL statements into your database:

/* First, create our posts table: */
CREATE TABLE posts (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(50),
    body TEXT,
    created DATETIME DEFAULT NULL,
    modified DATETIME DEFAULT NULL
);

/* Then insert some posts for testing: */
INSERT INTO posts (title, body, created)
    VALUES ('The title', 'This is the post body.', NOW());
INSERT INTO posts (title, body, created)
    VALUES ('A title once again', 'And the post body follows.', NOW());
INSERT INTO posts (title, body, created)
    VALUES ('Title strikes back', 'This is really exciting! Not.', NOW());
    
2. CakePHP Database Configuration

we should disclose to CakePHP where our database is and how to interface with it.
A duplicate of CakePHP's database configuration record is found in/app/Config/database.php.default.
Make a duplicate of this record in a similar index, however name it database.php.

The config file should be pretty straightforward:
just replace the values in the $default array with those that apply to your setup.

A sample completed configuration array might look something like the following:

public $default = array(
    'datasource' => 'Database/Mysql',
    'persistent' => false,
    'host' => 'localhost',
    'port' => '',
    'login' => 'cakeBlog',
    'password' => 'c4k3-rUl3Z',
    'database' => 'cake_blog_tutorial',
    'schema' => '',
    'prefix' => '',
    'encoding' => 'utf8'
);

Once you’ve saved your new database.php file,
you should be able to open your browser and see the CakePHP welcome page. 
It should also tell you that your database connection file was found, 
and that CakePHP can successfully connect to the database.

Optional Configuration
  1.Define a custom string (or “salt”) for use in security hashes.
        The security salt is used for generating hashes. Change the default Security.salt value in /app/Config/core.php
        
 /**
 * A random string used in security hashing methods.
 */
Configure::write('Security.salt', 'pl345e-P45s_7h3*S@l7!');
        
  2.Define a custom number (or “seed”) for use in encryption
        The cipher seed is used for encrypt/decrypt strings.
        Change the default Security.cipherSeed value by editing /app/Config/core.php. 
        The replacement value should be a large random integer:
        
 /**
 * A random numeric string (digits only) used to encrypt/decrypt strings.
 */
Configure::write('Security.cipherSeed', '7485712659625147843639846751');
  
  
